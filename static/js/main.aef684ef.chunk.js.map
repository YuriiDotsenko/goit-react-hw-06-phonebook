{"version":3,"sources":["components/Section/Section.js","components/Input/Input.js","components/AddButton/AddButton.js","redux/contacts/contacts-actions.js","components/Form/Form.js","components/ContactsList/ContactsList.js","components/Contacts/Contacts.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["Section","title","children","className","defaultProps","Input","type","name","pattern","value","handleInputChange","label","required","onChange","autoComplete","AddButton","actions","addField","createAction","removeField","setUpFilter","connect","state","contacts","dispatch","addItem","useState","setName","number","setNumber","handleInput","event","currentTarget","onSubmit","preventDefault","id","uuidv4","filterContacts","filter","items","normalizedFilter","toLowerCase","includes","filteredContacts","removeItem","map","onClick","Contacts","setFilter","length","itemsReducer","createReducer","payload","filterReducer","_","contactsReducer","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","expandedStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.aef684ef.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Section.css';\n\nconst Section = ({ title, children }) => (\n  <section className=\"Section\">\n    <h1 className=\"Title\">{title}</h1>\n    {children}\n  </section>\n);\n\nSection.defaultProps = {\n  title: '',\n  children: [],\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Input.css';\n\nconst Input = ({\n  type,\n  name,\n  pattern,\n  title,\n  value,\n  handleInputChange,\n  label,\n}) => (\n  <label className=\"Label\">\n    {label}:\n    <input\n      className=\"Input\"\n      type={type}\n      name={name}\n      pattern={pattern}\n      title={title}\n      required\n      value={value}\n      onChange={handleInputChange}\n      autoComplete=\"off\"\n    />\n  </label>\n);\n\nInput.defaultProps = {\n  type: 'text',\n  label: '',\n};\n\nInput.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string,\n};\n\nexport default Input;\n","import React from 'react';\nimport './AddButton.css';\n\nconst AddButton = () => (\n  <button className=\"Addbtn__style\" type=\"submit\">\n    Add contact\n  </button>\n);\n\nexport default AddButton;\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addField = createAction('phonebook/add');\r\nconst removeField = createAction('phonebook/remove');\r\nconst setUpFilter = createAction('phonebook/filter');\r\n\r\nconst actions = { addField, removeField, setUpFilter };\r\nexport default actions;\r\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Input from '../Input';\nimport AddButton from '../AddButton';\nimport './Form.css';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\n\nconst Form = ({ addItem, contacts }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInput = event => {\n    switch (event.currentTarget.name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        return;\n      case 'number':\n        setNumber(event.currentTarget.value);\n        return;\n      default:\n        return;\n    }\n  };\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n\n    addItem({ name, id: uuidv4(), number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <Input\n        label=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        handleInputChange={handleInput}\n        value={name}\n      />\n      <Input\n        label=\"Phone number\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        value={number}\n        handleInputChange={handleInput}\n      />\n      <AddButton />\n    </form>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n});\nconst mapDispatchToProps = dispatch => ({\n  addItem: value => dispatch(actions.addField(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './ContactsList.css';\n\nimport actions from '../../redux/contacts/contacts-actions';\n\nconst ContactsList = ({ filteredContacts, removeItem }) => (\n  <ul className=\"List\">\n    {filteredContacts.map(({ name, id, number }) => (\n      <li key={id} className=\"Contact\">\n        <p className=\"Text\">\n          <span className=\"Name\">{name}</span>\n          <span className=\"Phone\">{number}</span>\n        </p>\n        <button\n          className=\"Remove__btn\"\n          type=\"button\"\n          onClick={() => removeItem(id)}\n        >\n          Remove contact\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nconst filterContacts = (filter, items) => {\n  const normalizedFilter = filter.toLowerCase();\n  return items.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts }) => {\n  return {\n    filteredContacts: filterContacts(contacts.filter, contacts.items),\n  };\n};\nconst mapDispatchToProps = dispatch => ({\n  removeItem: value => dispatch(actions.removeField(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '../Input';\nimport ContactsList from '../ContactsList';\nimport { connect } from 'react-redux';\nimport actions from './../../redux/contacts/contacts-actions';\n\nconst Contacts = ({ title, contacts, setFilter }) => {\n  const handleFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  return (\n    <>\n      <h2>{title}</h2>\n      <Input\n        label=\"Find contacts by name:\"\n        type=\"text\"\n        name=\"filter\"\n        value={contacts.filter}\n        handleInputChange={handleFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      />\n      <ContactsList />\n    </>\n  );\n};\n\nContacts.defaultProps = {\n  title: '',\n};\n\nContacts.propTypes = {\n  title: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts,\n  };\n};\nconst mapDispatchToProps = dispatch => ({\n  setFilter: value => dispatch(actions.setUpFilter(value)),\n  removeItem: value => dispatch(actions.removeField(value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n","import React from 'react';\n\nimport Section from './components/Section';\nimport Form from './components/Form';\nimport Contacts from './components/Contacts';\n\nimport { connect } from 'react-redux';\n\nconst App = ({ contacts }) => {\n  const { items } = contacts;\n\n  return (\n    <div>\n      <Section title=\"Phonebook\">\n        <Form />\n        {items.length > 0 && <Contacts title=\"Contacts\" />}\n      </Section>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport actions from './contacts-actions';\r\nconst itemsReducer = createReducer([], {\r\n  [actions.addField]: (state, { payload }) => [...state, payload],\r\n  [actions.removeField]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.setUpFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport const contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { contactsReducer } from './contacts/contacts-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n  key: 'contactsList',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistConfig, contactsReducer),\r\n  },\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\nconst persistor = persistStore(store);\r\nconst expandedStore = { store, persistor };\r\n\r\nexport default expandedStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nimport { Provider } from 'react-redux';\nimport expandedStore from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={expandedStore.store}>\n      <PersistGate loading=\"loading...\" persistor={expandedStore.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}